


package communicationNetworkAnalysis;
import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class GraphImporter extends Graph {

	private String fileURI;
	
	
	//std constructor
	public GraphImporter(String file) throws IOException {
		setFileURI(file);
	}


	public String getFileURI() { return fileURI; }
	public void setFileURI(String fileToRead) { this.fileURI = fileToRead; }
	
	
	public void readGraphml() {
		Node n = new Node();
		Edge e = new Edge();
		
		try {
			BufferedReader reader = Files.newBufferedReader(Paths.get(getFileURI()));
			String line;
			
			int nodeCount=0;
			int edgeCount=0;
			while ((line = reader.readLine()) != null) { // read all lines to find information
				
            	if (line.contains("id=\"n")) { // find line of node id

            		n.setNode_id(Integer.toString(nodeCount));
//            		System.out.println(n.getNode_id());
            		addNode(nodeCount, n);
            		
            		
            		
            		//TODO call of addNode must be in a loop to fed the nodeMap
            		
            		
            		
            		//
//            		System.out.print("Node ID: ");
//            		for(char c : line.toCharArray()){
//            	        if(Character.isDigit(c)){
//            	            System.out.print(c);
//            	        }
//            		}
//            		System.out.println();
            		
            		nodeCount++;
            	}
            	
//            	if (line.contains("key=\"v_id\">")) { // find line of edge id
//
//            		e.setSource(source);
//            		
////            		System.out.print("Edge ID: ");
////            		for(char c : line.toCharArray()){
////            	        if(Character.isDigit(c)){
////            	            System.out.print(c);
////            	        }
////            		}
////            		System.out.println();
//            		
//            		edgeCount++;
//            	}
            	
            	
            }
		
		} catch (IOException ex) {
			// TODO Auto-generated catch block
			ex.printStackTrace();
		}
		 	
	}
	
	
}





System.out.println(line);
//            		this.getEdgeMap().put(edgeCount, new Edge());




e.setSource(source);
//            		
////            		System.out.print("Edge ID: ");
////            		for(char c : line.toCharArray()){
////            	        if(Character.isDigit(c)){
////            	            System.out.print(c);
////            	        }
////            		}
////            		System.out.println();



for (int keys : gi.getNodeMap().keySet())
		{
		   System.out.println(keys);
		}










package communicationNetworkAnalysis;
import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class GraphImporter extends Graph {

	private String fileURI;
	
	
	//std constructor
	public GraphImporter(String file) throws IOException {
		setFileURI(file);
		readGraphml();
	}


	public String getFileURI() { return fileURI; }
	public void setFileURI(String fileToRead) { this.fileURI = fileToRead; }
	
	
	public void readGraphml() {
		// edge informations will be gathered in lists to later save them ordered in the edgeMap
		List<Integer> edgeIdL = new ArrayList<Integer>();
		List<Integer> edgeSourceL = new ArrayList<Integer>();
		List<Integer> edgeTargetL = new ArrayList<Integer>();
		List<Integer> edgeWeightL = new ArrayList<Integer>();
		
		try {
			// load graphml into a BufferdReader to search it for graph information line by line
			BufferedReader reader = Files.newBufferedReader(Paths.get(getFileURI()));
			String line;
			
			// pattern to filter numbers in graphml file
			Pattern pattern = Pattern.compile("([0-9]+)");
			
			// read all lines to find graph information
			while((line = reader.readLine()) != null) { 
				Matcher matcher = pattern.matcher(line);
				
				// find line containing node id
            	if(line.contains("id=\"n")) {
            		if(matcher.find()) {
                        int nodeID = Integer.valueOf(matcher.group(1));
//                        System.out.println("Node ID: " + nodeID);
                        this.getNodeMap().put(nodeID, new Node(nodeID));
            		}
            	}
            	
            	// find edges:
            	// find line containing edge source & target
            	if(line.contains("<edge source=")) { 
                    if(matcher.find()) {
//                        int edgeSource = Integer.valueOf(matcher.group(1));
                        edgeSourceL.add(Integer.valueOf(matcher.group(1)));
//                        System.out.print("Source: " + edgeSource);
                        if(matcher.find()) {
//                        	int edgeTarget = Integer.valueOf(matcher.group(1));
                        	edgeTargetL.add(Integer.valueOf(matcher.group(1)));
//                        	System.out.print("	Target: " + edgeTarget);
                        }
                    }
            	}
            	
            	// find line containing edge ID
            	if(line.contains("<data key=\"e_id\">")) {
            		if(matcher.find()) {
//            			int edgeID = Integer.valueOf(matcher.group(1));
            			edgeIdL.add(Integer.valueOf(matcher.group(1)));
//            			System.out.print("	edge ID: " + edgeID);
            		}
            	}
            	
            	//find line containing edge weight
            	if(line.contains("<data key=\"e_weight\">")) {
            		if(matcher.find()) {
//            			int edgeWeight = Integer.valueOf(matcher.group(1));
            			edgeWeightL.add(Integer.valueOf(matcher.group(1)));
//            			System.out.println("	Weight: " + edgeWeight);
            		}
            	}
            }	
		} catch (IOException ex) {
			// TODO Auto-generated catch block
			ex.printStackTrace();
		}
		
		//saves Edges with relating information
		for(int i=0; i<edgeIdL.size() ;i++) {
			this.getEdgeMap().put(i, new Edge(edgeIdL.get(i), edgeSourceL.get(i), edgeTargetL.get(i), edgeWeightL.get(i)));
		}
	}
	
	
}


